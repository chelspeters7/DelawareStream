library(dataRetrieval)
library(ggplot2)
library(forecast)
library(plyr)
library(dplyr)
require(stats)
setwd("C:/Users/Admin/Desktop/Chelsea/Projects/DelawareStream/Script")
setwd('..')
source("Script/StreamFunctions.R")
source("Script/BFI.r")
sites <- whatNWISsites(bBox=c(-83.0,36.5,-81.0,38.5),
parameterCd=c("00010","00060"),
hasDataTypeCd="dv")
View(sites)
sites <- whatNWISsites(bBox=c(-77.9,36.5,-71.6,41.5),
parameterCd=c("00095","00060"),
hasDataTypeCd="dv")
sites <- whatNWISsites(bBox=c(-77.9,36.5,-72.6,41.0),
parameterCd=c("00095","00060"),
hasDataTypeCd="dv")
View(sites)
sites <- whatNWISsites(bBox=c(-77.9,36.5,-72.6,41.0),
parameterCd=c("00095"),
hasDataTypeCd="dv")
View(sites)
View(sites)
count = 1
sites$site_no[count]
parameterCd <- "all"
startDate <- "1980-01-01"
endDate <- "2019-06-01"
for (count in 1:3)) {
# Determine site number
siteNumber = sites$site_no[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
}
for (count in 1:3) {
# Determine site number
siteNumber = sites$site_no[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
}
View(SC_D)
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
View(SC_D)
sitesd <- whatNWISsites(bBox=c(-77.9,36.5,-72.6,41.0),
parameterCd=c("00060"),
hasDataTypeCd="dv")
dis <- sitesd$site_no
spc <- sites$site_no
setdiff(dis, spc)
spc[!(spc %in% dis)]
(spc %in% dis)
!(spc %in% dis)
spc[!(spc %in% dis)]
spc[(spc %in% dis)]
"02041000" %in% dis
# Discharge sites
sitesd <- whatNWISsites(bBox=c(-77.9,36.5,-72.6,41.0),
parameterCd=c("00060"),
hasDataTypeCd="dv")
dis <- sitesd$site_no
# Salinity sites
sitess <- whatNWISsites(bBox=c(-77.9,36.5,-72.6,41.0),
parameterCd=c("00095"),
hasDataTypeCd="dv")
spc <- sites$site_no
# Good sites
sites <- spc[(spc %in% dis)]
parameterCd <- "all"
startDate <- "1980-01-01"
endDate <- "2019-06-01"
for (count in 1:3) {
# Determine site number
siteNumber = sites$site_no[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
}
sites <- data.frame("site_no" = sites)
parameterCd <- "all"
startDate <- "1980-01-01"
endDate <- "2019-06-01"
for (count in 1:3) {
# Determine site number
siteNumber = sites$site_no[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
}
View(SC_D)
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
plot(SC_D$SpecCond)
siteNumbers <- sites
parameterCd <- "all"
startDate <- "1980-01-01"
endDate <- "2019-06-01"
for (count in 1:length(siteNumbers)) {
# Determine site number
siteNumber = siteNumbers[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Plot
filename = paste("Figures/",siteInfo$site_no,".png",sep="")
png(file = filename, width = 1000, height = 1000)
par(mar=c(5,5,5,5)) #sets the size of the plot window
if("00095" %in% variableInfo$variableCode){
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
eq = stream.trendline.equation(SC_D$SpecCond, SC_D$Date, SC_D, "red")
par(new=TRUE)
}
if ("72137" %in% variableInfo$variableCode){
plot(SC_D$Date, SC_D$X_72137,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText(SC_D, "72137", eq)
eq1 = stream.trendline.equation(SC_D$X_72137, SC_D$Date, SC_D, "black")
} else if ("00060" %in% variableInfo$variableCode){
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText(SC_D, "00060", eq)
eq1 = stream.trendline.equation(SC_D$Flow, SC_D$Date, SC_D, "black")
} else {
stream.PlotOcean(SC_D, siteNumber, startDate, endDate)
print(siteNumber)
}
print("DONE")
dev.off()
}
# Good sites
sites <- spc[(spc %in% dis)]
siteNumbers <- sites
parameterCd <- "all"
startDate <- "1980-01-01"
endDate <- "2019-06-01"
for (count in 1:length(siteNumbers)) {
# Determine site number
siteNumber = siteNumbers[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Plot
filename = paste("Figures/",siteInfo$site_no,".png",sep="")
png(file = filename, width = 1000, height = 1000)
par(mar=c(5,5,5,5)) #sets the size of the plot window
if("00095" %in% variableInfo$variableCode){
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
eq = stream.trendline.equation(SC_D$SpecCond, SC_D$Date, SC_D, "red")
par(new=TRUE)
}
if ("72137" %in% variableInfo$variableCode){
plot(SC_D$Date, SC_D$X_72137,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText(SC_D, "72137", eq)
eq1 = stream.trendline.equation(SC_D$X_72137, SC_D$Date, SC_D, "black")
} else if ("00060" %in% variableInfo$variableCode){
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText(SC_D, "00060", eq)
eq1 = stream.trendline.equation(SC_D$Flow, SC_D$Date, SC_D, "black")
} else {
stream.PlotOcean(SC_D, siteNumber, startDate, endDate)
print(siteNumber)
}
print("DONE")
dev.off()
}
View(SC_D)
View(SC_D)
for (count in 1:2) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
}
for (count in 1:2) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Output to CSV
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(SC_D, file = filename)
}
for (count in 1:2) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Output to CSV
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(SC_D, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
eq = stream.trendline.equation(SC_D$SpecCond, SC_D$Date, SC_D, "red")
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText(SC_D, "00060", eq)
eq1 = stream.trendline.equation(SC_D$Flow, SC_D$Date, SC_D, "black")
}
source("Script/StreamFunctions.R")
for (count in 1:2) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Output to CSV
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(SC_D, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
#eq = stream.trendline.equation(SC_D$SpecCond, SC_D$Date, SC_D, "red")
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
#eq1 = stream.trendline.equation(SC_D$Flow, SC_D$Date, SC_D, "black")
}
for (count in 1:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Output to CSV
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(SC_D, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
#eq = stream.trendline.equation(SC_D$SpecCond, SC_D$Date, SC_D, "red")
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
#eq1 = stream.trendline.equation(SC_D$Flow, SC_D$Date, SC_D, "black")
}
View(SC_D)
View(statInfo)
View(variableInfo)
siteNumber
startDate <- "1950-01-01"
endDate <- "2019-06-01"
for (count in 1:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
# Output to CSV
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(SC_D, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
}
View(SC_D)
plot(SC_D$Date, SC_D$SpecCond)
for (count in 2:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
if("00095" %in% variableInfo$variableCode){
# Output to CSV
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(SC_D, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
}
}
("00095" %in% variableInfo$variableCode)
for (count in 2:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
if("00095" %in% variableInfo$variableCode){
# Output to CSV
df <- data.frame("Date" = SC_D$Date, "Flow" = SC_D$Flow, "SpC" = SC_D$SpecCond)
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(df, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
}
}
View(SC_D)
for (count in 2:4) {
}
for (count in 2:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
if("00095" %in% variableInfo$variableCode){
# Output to CSV
df <- data.frame("No" = SC_D$site_no, Date" = SC_D$Date, "Flow" = SC_D$Flow, "SpC" = SC_D$SpecCond)
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(df, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
}
}
for (count in 2:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
if("00095" %in% variableInfo$variableCode){
# Output to CSV
df <- data.frame("No" = SC_D$site_no, "Date" = SC_D$Date, "Flow" = SC_D$Flow, "SpC" = SC_D$SpecCond)
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(df, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
}
}
for (count in 2:4) {
# Determine site number
siteNumber = sites[count]
# Find salinity and discharge given siteNumber, parameterCd, startDate, and endDate.
SC_D <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
SC_D <- stream.cleandf(SC_D)
#Information about the data frame attributes:
statInfo <- attr(SC_D, "statisticInfo")
variableInfo <- attr(SC_D, "variableInfo")
siteInfo <- attr(SC_D, "siteInfo")
parameterscodes <- variableInfo$variableCode
if("00095" %in% variableInfo$variableCode){
# Output to CSV
df <- data.frame("No" = SC_D$site_no, "Date" = SC_D$Date, "Flow" = SC_D$Flow, "SpC" = SC_D$SpecCond)
filename = paste("Data/",siteInfo$site_no,".csv",sep="")
write.csv(df, file = filename)
# Plot
par(mar=c(5,5,5,5)) #sets the size of the plot window
plot(SC_D$Date, SC_D$SpecCond,col="red",
ylab=variableInfo$variableDescription[which(variableInfo$variableCode == "00095")],
xlab="" )
par(new=TRUE)
plot(SC_D$Date, SC_D$Flow,col="black",xaxt="n",yaxt="n",xlab="",ylab="",axes=FALSE)
stream.PlotText.noeq(SC_D, "00060")
}
}
